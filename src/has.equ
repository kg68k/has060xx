	.nlist
;----------------------------------------------------------------
;	X68k High-speed Assembler
;		定数・マクロ定義
;		< has.equ >
;
;		Copyright 1990-1994  by Y.Nakamura
;			  1996-2023  by M.Kamada
;			  2023-2024  by TcbnErik
;----------------------------------------------------------------

  .ifndef __HAS_EQU__
__HAS_EQU__	equ	1

;----------------------------------------------------------------
version		reg	'3.09+91'	;バージョンNo.
verno		equ	309		;(@VERSIONの値)
verno060	equ	91		;__HAS060__の値
copyright	reg	'(C) 1990-1994/1996-2023 Y.Nakamura/M.Kamada'	;title_msgの著作権表示

version_x	reg	'1.1.0'		;バージョンNo.
verno_x		equ	$01_01_00	;__HAS060X__の値
copyright_x	reg	'(C) 2023-2024 TcbnErik'

  .ifndef EUCSRC
EUCSRC		equ	0		;ソースの文字コード(0=SJIS,1=EUC)
  .endif
  .ifndef EUCMES
EUCMES		equ	0		;メッセージの文字コード(0=SJIS,1=EUC)
  .endif
  .ifndef UNIX_NEWLINE
UNIX_NEWLINE	equ	0		;メッセージの改行コード(0=$0D0A,1=$0A)
  .endif

;----------------------------------------------------------------
;	定数の定義
;----------------------------------------------------------------
BELL		equ	$07
TAB		equ	$09
LF		equ	$0A
FF		equ	$0C
CR		equ	$0D
EOF		equ	$1A

STDOUT		equ	1
STDERR		equ	2

  .if UNIX_NEWLINE=0
CRLF		reg	CR,LF
  .else
CRLF		reg	LF
  .endif

;ハッシュテーブルのサイズを32768未満の2のべき乗にする
SYMHASHSIZE	equ	8192	;シンボルハッシュテーブルのサイズ
CMDHASHSIZE	equ	1024	;命令ハッシュテーブルのサイズ

INCLDMAXNEST	equ	8	;インクルードファイルの最大ネスティング数
MACROMAXNEST	equ	32	;マクロ展開の最大ネスティング数

;SYMEXTCOUNTは16の倍数にすること
SYMEXTCOUNT	equ	2000	;一度に用意するシンボルテーブル数

MAXLINELEN	equ	8*1024	;一行の最大長

LOCSYMBUFSIZE	equ	16384	;マクロ内のローカルシンボル名のバッファのサイズ
				;(1つのマクロ定義で使えるローカルシンボルの最大サイズ)


;----------------------------------------------------------------
;	マクロ定義
;----------------------------------------------------------------

;----------------------------------------------------------------
;	レジスタの値を偶数境界に合わせる
doeven	.macro	reg
	addq.l	#1,reg
	and.b	#$FE,reg
	.endm

;----------------------------------------------------------------
;	レジスタの値をロングワード境界に合わせる
doquad	.macro	reg
	addq.l	#3,reg
	and.b	#$FC,reg
	.endm

;----------------------------------------------------------------
;	大文字なら小文字化する
tolower	.macro	reg
	cmpi.b	#'Z',reg
	bhi	@skip
	cmpi.b	#'A',reg
	bcs	@skip
	ori.b	#$20,reg
@skip:
	.endm

;----------------------------------------------------------------
;	68000/68010ならジャンプする
bra68	.macro	reg,label
	move.b	(CPUTYPE,a6),reg
	andi.b	#(C000|C010)>>8,reg
	bne	label
	.endm

;----------------------------------------------------------------
;	68000/68010でないならジャンプする
bran68	.macro	reg,label
	move.b	(CPUTYPE,a6),reg
	andi.b	#(C000|C010)>>8,reg
	beq	label
	.endm

;----------------------------------------------------------------
;	32bitオフセットのbsrを行う
bsrl	.macro	adr,reg
@currentpc:
	move.l	#adr-@currentpc,reg
	jsr	(@currentpc,pc,reg.l)
	.endm

;----------------------------------------------------------------
;	32ビットの相対lea
llea	.macro	adr,reg
@currentpc:
	lea.l	(@currentpc,pc),reg
	adda.l	#adr-@currentpc,reg
	.endm

;----------------------------------------------------------------
;	現在のファイルポインタ位置を得る
GETFPTR	.macro	adr,reg
	move.l	(F_TOPOFST+adr,a6),reg
	add.l	(F_PTROFST+adr,a6),reg
	.endm

;----------------------------------------------------------------
;	EUC対応
jissft	.macro	h,l
	l:=l+$1F
	h:=h+1
  .if h.and.1
	l:=l+$5E
  .endif
	h:=h/2
  .if l>=$7F
	l:=l+1
  .endif
	h:=h+$70
  .if h>=$A0
	h:=h+$40
  .endif
	.endm

sftjis	.macro	h,l
  .if h>=$E0
	h:=h-$40
  .endif
	h:=h-$70
  .if l>=$80
	l:=l-1
  .endif
	h:=h*2
  .if l>=$9E
	l:=l-$5E
	h:=h+1
  .endif
	h:=h-1
	l:=l-$1F
	.endm

;シフトJISコードで書かれた文字列をEUCコードで埋め込む
eucstr	.macro	str
  .irpc c,str
    .if '&c'<=$FF
	.dc.b	'&c'
    .else
	h:=('&c'>>8).and.$FF
	l:='&c'.and.$FF
	sftjis	h,l
	.dc.b	$80+h,$80+l
    .endif
  .endm
	.endm

mes	.macro	str
  .if EUCMES=0
	.dc.b	str
  .else
	eucstr	str
  .endif
	.endm

;----------------------------------------------------------------
;	シンボル定義属性
;----------------------------------------------------------------
SA_UNDEF	equ	0	;使用されたが定義されていない
SA_NODET	equ	1	;定義されたが値が定まっていない
SA_DEFINE	equ	2	;定義されて値が定まった
SA_PREDEFINE	equ	3	;定義されて値が定まっており再定義できない


;----------------------------------------------------------------
;	セクションコード
;----------------------------------------------------------------
SECT_ABS	equ	$00	;定数
SECT_TEXT	equ	$01	;テキスト
SECT_DATA	equ	$02	;データ
SECT_BSS	equ	$03	;ブロックストレージ
SECT_STACK	equ	$04	;スタック
SECT_RDATA	equ	$05	;データ			(64KB以内相対)
SECT_RBSS	equ	$06	;ブロックストレージ
SECT_RSTACK	equ	$07	;スタック
SECT_RLDATA	equ	$08	;データ			(64KB以上相対)
SECT_RLBSS	equ	$09	;ブロックストレージ
SECT_RLSTACK	equ	$0A	;スタック
N_SECTIONS	equ	$0A	;セクションの数(text/data/bss/stack/rl?data/rl?bss/rl?stack)


;----------------------------------------------------------------
;	外部定義属性
;----------------------------------------------------------------
SECT_GLOBL	equ	$FA	;グローバル(外部参照/定義)
SECT_XDEF	equ	$FB	;外部定義
SECT_RLCOMM	equ	$FC	;コモンエリア(64KB以上相対)
SECT_RCOMM	equ	$FD	;コモンエリア(64KB以内相対)
SECT_COMM	equ	$FE	;コモンエリア
SECT_XREF	equ	$FF	;外部参照


;----------------------------------------------------------------
;	ファイルポインタの構造
;----------------------------------------------------------------
	.offset	0
F_HANDLE:	.ds.w	1	;ファイルハンドル(オープン前なら-1)
F_BUFPTR:	.ds.l	1	;ファイルバッファへのポインタ
F_BUFLEN:	.ds.l	1	;ファイルバッファ長
F_TOPOFST:	.ds.l	1	;バッファ先頭データのオフセット
F_DATALEN:	.ds.l	1	;バッファ内のデータ長
F_PTROFST:	.ds.l	1	;次のデータのオフセット
F_NAMEPTR:	.ds.l	1	;ファイル名へのポインタ
;F_DATAPTR:	.ds.l	1	;次のデータへのポインタ
;F_BUFLEFT:	.ds.l	1	;未使用/未読のバッファ長
F_PTRLEN:


;----------------------------------------------------------------
;	SCD拡張シンボルテーブルの構造
;----------------------------------------------------------------
	.offset	0
SCD_NAME:	.ds.b	8	;シンボル名
SCD_VAL:	.ds.l	1	;シンボル値
SCD_SECT:	.ds.w	1	;値の存在するセクション
SCD_TYPE:	.ds.w	1	;シンボルの型
SCD_SCL:	.ds.b	1	;シンボルの記憶クラス
SCD_LEN:	.ds.b	1	;シンボルテーブルの長さ
SCD_TAG:	.ds.l	1	;構造シンボルのタグ位置
SCD_SIZE:	.ds.l	1	;シンボルのサイズ
SCD_DIM:	.ds.w	2	;配列シンボルの要素数
SCD_NEXT:	.ds.l	1	;テーブルチェイン
		.ds.w	1	;(未使用)
SCD_TBLLEN:


;----------------------------------------------------------------
;	実効アドレス解釈バッファの内容
;----------------------------------------------------------------
	.offset	0
EACODE:		.ds.w	1	;実効アドレスモードエンコード
EXTCODE:	.ds.w	1	;拡張ワード
EADTYPE:	.ds.b	1	;実効アドレスデータタイプ
EAIMMCNT:	.ds.b	1	;実効アドレスのイミディエイトデータ数(FP命令用)

RPNSIZE1:	.ds.b	1	;式のサイズ
OPTIONALPC:	.ds.b	1	;実効アドレスのPCがoptionalならtrue
	.even
RPNLEN1:	.ds.w	1	;逆ポーランド式の長さ(-1なら定数/0なら式がない)
RPNBUF1:	.ds.w	128	;逆ポーランド式バッファ/定数値

RPNSIZE2:	.ds.b	1	;(od用)
	.even
RPNLEN2:	.ds.w	1	;
RPNBUF2:	.ds.w	128	;
EABUFSIZE:


;----------------------------------------------------------------
;	演算子コード
;----------------------------------------------------------------
;リンカに渡す演算子番号は変更不可
;単項演算子
OP_NEG		equ	$01
OP_POS		equ	$02
OP_NOT		equ	$03
OP_HIGH		equ	$04
OP_LOW		equ	$05
OP_HIGHW	equ	$06
OP_LOWW		equ	$07
OP_NUL		equ	$08
;二項演算子
OP_MUL		equ	$09
OP_DIV		equ	$0A
OP_MOD		equ	$0B
OP_SHR		equ	$0C
OP_SHL		equ	$0D
OP_ASR		equ	$0E
OP_SUB		equ	$0F
OP_ADD		equ	$10
OP_EQ		equ	$11
OP_NE		equ	$12
OP_LT		equ	$13
OP_LE		equ	$14
OP_GT		equ	$15
OP_GE		equ	$16
OP_SLT		equ	$17
OP_SLE		equ	$18
OP_SGT		equ	$19
OP_SGE		equ	$1A
OP_AND		equ	$1B
OP_XOR		equ	$1C
OP_OR		equ	$1D
;以降はリンカに渡さない演算子
OPNOTLK		equ	$1E
;.notb./.notw.
OP_NOTB		equ	$1E
OP_NOTW		equ	$1F
;.sizeof./.defined.
OP_SIZEOF	equ	$20
OP_DEFINED	equ	$21
;演算子の種類の数
OPCOUNT		equ	$22

  .endif	;__HAS_EQU__

	.text
	.list
